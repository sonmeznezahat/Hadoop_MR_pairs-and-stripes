{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 // package io.bespin.scala.spark.bigram\
\
// import io.bespin.scala.util.Tokenizer\
\
//import org.apache.log4j._\
\
\
import org.apache.hadoop.fs._\
import org.apache.spark.SparkContext\
import org.apache.spark.SparkConf\
//import org.apache.spark.rdd.RDD\
// import org.rogach.scallop._\
//import com.caseystella.util.CLIParserDriver\
//package com.caseystella.analysis\
\
\
\
/*\
class Conf(args: Seq[String]) extends ScallopConf(args) with Tokenizer \{\
  mainOptions = Seq(input, output, reducers)\
  val input = opt[String](descr = "input path", required = true)\
  val output = opt[String](descr = "output path", required = true)\
  val reducers = opt[Int](descr = "number of reducers", required = false, default = Some(1))\
\}\
* */\
\
object BigramCount extends Tokenizer \{\
 // val log = Logger.getLogger(getClass().getName())\
\
  def main(argv: Array[String]) \{\
    // val args = new Conf(argv)\
\
    //log.info("Input: " + argv( 0 ))\
    //log.info("Output: " + argv( 1 ))\
    // log.info("Number of reducers: " + "1")\
    \
    val conf = new SparkConf().setAppName("Bigram Count")\
    val sc = new SparkContext(conf)\
\
    val textFile = sc.textFile(argv( 0 ))\
    \
      val counts = textFile\
      .flatMap(line => \{\
        val tokens = tokenize(line)\
        if (tokens.length > 1) tokens.sliding(2).toList else List()\
      \})\
      .map(bigram => (bigram, 1)) \
      \
      /*\
       * read file\
       * tokenize\
       * sliding-2\
       * pair counts = p(x,y) = ((x, y), 1)\
       * p(x)\
       * joint = p(x,y)/p(x)\
       */\
\
     val px = counts.map( bigram => (/*key*/bigram._1.take(1).toString(),/*value*/bigram._2))\
     \
     val pxyCounts = counts.reduceByKey(_+_)\
     val pxCounts = px.reduceByKey(_+_)\
     \
     val pxMap = Map(pxCounts.collect():_*)\
    \
     val result = pxyCounts.map(bigram => (bigram._1, (bigram._2.toFloat / pxMap(bigram._1.take(1).toString()))))\
      result.saveAsTextFile(argv(1))   \
  \}\
\}\
\
\
}